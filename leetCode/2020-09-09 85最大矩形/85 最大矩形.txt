// 85. 最大矩形

// 给定一个仅包含 0 和 1 的二维二进制矩阵，找出只包含 1 的最大矩形，并返回其面积。
// 示例:
// 输入:
// [
//   ["1","0","1","0","0"],
//   ["1","0","1","1","1"],
//   ["1","1","1","1","1"],
//   ["1","0","0","1","0"]
// ]
// 输出: 6

var maximalRectangle = (matrix) => {
    const dp = [];
    for (let i = 0; i < matrix.length; i++) {
        let dpObjs = [];
        for (let j = 0; j < matrix[i].length; j++) {
            let dpObj = matrix[i][j] === "0" ? 
            	{x: 0, y: 0, rect: {x: 0, y: 0}} : {x: 1, y:1 , rect: {x: 1, y: 1}};
            dpObjs.push(dpObj);
        }
        dp.push(dpObjs);
    }
    for (let i = 0; i < matrix.length; i++) {
        for (let j = 0; j < matrix[i].length; j++) {
            if (matrix[i][j] === "1") {
                if (i === 0 && j === 0) {
                    continue;
                } else if (i === 0 && j > 0) {
                    dp[i][j] = matrix[i][j - 1] === "1" ? 
                      {x: dp[i][j - 1].x + 1, y: 1, rect: {x: dp[i][j - 1].x + 1, y: 1}} : 
                        {x: 1, y:1 , rect: {x: 1, y: 1}};
                } else if (j === 0){
                    dp[i][j] = matrix[i - 1][j] === "1" ? 
                      {x: 1, y: dp[i - 1][j].y + 1, rect: {x: 1, y: dp[i - 1][j].y + 1}} : 
                        {x: 1, y:1 , rect: {x: 1, y: 1}};
                } else {
                    if (matrix[i - 1][j] === "0") {
                        dp[i][j] = {x: dp[i][j - 1].x + 1, y: 1, 
                                    rect:{ x: dp[i][j - 1].x + 1, y: 1}};
                    } else if (matrix[i][j - 1] === "0") {
                        dp[i][j] = {x: 1, y: dp[i - 1][j].y + 1, 
                                    rect: { x: 1, y: dp[i - 1][j].y + 1}};
                    } else  {
                        dp[i][j].x = dp[i][j - 1].x + 1;
                        dp[i][j].y = dp[i - 1][j].y + 1; 
                        let rect1 = (dp[i-1][j].rect.y + 1) * Math.min(dp[i - 1][j].rect.x,dp[i][j].x);
                        let rect2 = (dp[i][j-1].rect.x + 1) * Math.min(dp[i][j - 1].rect.y,dp[i][j].y);
                        let rect3 = Math.min(dp[i - 1][j - 1].rect.x + 1, dp[i][j].x) * 
                        			Math.min(dp[i - 1][j - 1].rect.y + 1, dp[i][j].y);
                        if (rect1 >= rect2 && rect1 >= rect3) {
                            dp[i][j].rect = {
                                x: Math.min(dp[i - 1][j].rect.x, dp[i][j].x), 
                                y: dp[i-1][j].rect.y + 1
                            };
                        } else if (rect2 >= rect1 && rect2 >= rect3) {
                            dp[i][j].rect = {
                                x: dp[i][j - 1].rect.x + 1, 
                                y: Math.min(dp[i][j - 1].rect.y, dp[i][j].y)
                            };
                        } else if (rect3 >= rect1 && rect3 >= rect2) {
                            dp[i][j].rect = {
                                x: Math.min(dp[i - 1][j - 1].rect.x + 1, dp[i][j].x), 
                                y: Math.min(dp[i - 1][j - 1].rect.y + 1, dp[i][j].y)
                            };
                        }
                    }
                }
            }
        }
    }
    let max = 0;
    for (let i = 0; i < matrix.length; i++) {
        for (let j = 0; j < matrix[i].length; j++) {
                max = Math.max(max, dp[i][j].rect.x * dp[i][j].rect.y);
        }
    }
    console.log(dp);
    return max;
}